{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the ixo Protocol\n\n\nPlease have a look at the \nixo Foundation website\n for more information on what we do.\n\n\nIntroduction\n\n\nThe documentation on this site is aimed at technical people who wish to understand the inner workings of the ixo protocol, how it works and how to integrate your applications and systems into the protocol.\n\n\nIn simple terms, the ixo protocol allows for the creating of projects in persuit of the UN's sustainable development goals. People, systems or IOT devices can then submit claims regarding \nthe work performed against these projects.  This work is then evaluated for accuracy and authenticity by evaluators.  Evaluators may also be people, systems or evaluation oracles that could pull in vast amounts of data to determine the evaluation result.\n\n\nOverview of the Architecture\n\n\nThe ixo platform is managed by a number of components and systems that interoperate in order to provide the full services that the ixo protocol offers.\n\n\n\n\nFor futher information see the \ndocumentation on our components\n.\n\n\nThe ixo Blockchain\n\n\nThe ixo blockchain contains the records of evey claim that is issued against a project the the subsequent evaluation of those claims.  Each record is validated by a quorum of validator nodes before it is written to the chain and thereafter the record cannot be removed or updated.  This data is then aggegated to build out the final states of the projects.\n\n\nAll the information on the ixo blockchain is publically avaialble through the ixo Explorer. This data includes the project information, stats regarding the project, the stakeholders of the project and the structure of data being captured against the project.  All actual claim data is stored in the Project Datastore.\n\n\nPrivacy of Data\n\n\nMuch of the data that is captured within a claim is highly sensive in nature.  This data might have specific regulator requirements such as GDPR or maybe the data may not reside outside certain geographical boundaries.  In order to comply with this and to also put the data into the hands of the owners of the project we have created the concept of independant data stores for each project.\n\n\nThe ixo Blockchain keeps a link to the location of these project data stores and provides services to the project data that are goverened by cryptographic access controls.\n\n\nSecurity\n\n\nAll requests to that create data or access sensitive data require cryptographic signatures and a capabilities model supports this to provide finer grained access control.\n\n\nMessage Flows\n\n\n\n\nUpdate Messages\n\n\nIn general update requests are created and signed on the front end using our keysafe which holds the private keys for the user. The request with it's signature portion is then passed to the Project Datastore (PDS) when it is processed and the results is then ledgered onto the ixo blockchain with hash references back to the original transaction on the PDS. The block containin the request is then processed on the ixo blockchange and the ixo Explorer the sychs this block to the current system state.\n\n\nRead Messages\n\n\nWhen reading publically availably data a REST call is made to the ixo Explorer that contians the current state of the the blockchain.  If provate information needs ot be accessed than a signed request is submitted to the PDS which will respond withthe data if the the signature and capabilited of the user adhere to the policies for that data.\n\n\nPilots\n\n\nAmply\n\n\nAmply is a MVP project that we have built to prove the utility of the ixo protocol.  The code for this project can be found on our \nAmply github repository\n.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-ixo-protocol",
            "text": "Please have a look at the  ixo Foundation website  for more information on what we do.",
            "title": "Welcome to the ixo Protocol"
        },
        {
            "location": "/#introduction",
            "text": "The documentation on this site is aimed at technical people who wish to understand the inner workings of the ixo protocol, how it works and how to integrate your applications and systems into the protocol.  In simple terms, the ixo protocol allows for the creating of projects in persuit of the UN's sustainable development goals. People, systems or IOT devices can then submit claims regarding \nthe work performed against these projects.  This work is then evaluated for accuracy and authenticity by evaluators.  Evaluators may also be people, systems or evaluation oracles that could pull in vast amounts of data to determine the evaluation result.",
            "title": "Introduction"
        },
        {
            "location": "/#overview-of-the-architecture",
            "text": "The ixo platform is managed by a number of components and systems that interoperate in order to provide the full services that the ixo protocol offers.   For futher information see the  documentation on our components .",
            "title": "Overview of the Architecture"
        },
        {
            "location": "/#the-ixo-blockchain",
            "text": "The ixo blockchain contains the records of evey claim that is issued against a project the the subsequent evaluation of those claims.  Each record is validated by a quorum of validator nodes before it is written to the chain and thereafter the record cannot be removed or updated.  This data is then aggegated to build out the final states of the projects.  All the information on the ixo blockchain is publically avaialble through the ixo Explorer. This data includes the project information, stats regarding the project, the stakeholders of the project and the structure of data being captured against the project.  All actual claim data is stored in the Project Datastore.",
            "title": "The ixo Blockchain"
        },
        {
            "location": "/#privacy-of-data",
            "text": "Much of the data that is captured within a claim is highly sensive in nature.  This data might have specific regulator requirements such as GDPR or maybe the data may not reside outside certain geographical boundaries.  In order to comply with this and to also put the data into the hands of the owners of the project we have created the concept of independant data stores for each project.  The ixo Blockchain keeps a link to the location of these project data stores and provides services to the project data that are goverened by cryptographic access controls.",
            "title": "Privacy of Data"
        },
        {
            "location": "/#security",
            "text": "All requests to that create data or access sensitive data require cryptographic signatures and a capabilities model supports this to provide finer grained access control.",
            "title": "Security"
        },
        {
            "location": "/#message-flows",
            "text": "",
            "title": "Message Flows"
        },
        {
            "location": "/#update-messages",
            "text": "In general update requests are created and signed on the front end using our keysafe which holds the private keys for the user. The request with it's signature portion is then passed to the Project Datastore (PDS) when it is processed and the results is then ledgered onto the ixo blockchain with hash references back to the original transaction on the PDS. The block containin the request is then processed on the ixo blockchange and the ixo Explorer the sychs this block to the current system state.",
            "title": "Update Messages"
        },
        {
            "location": "/#read-messages",
            "text": "When reading publically availably data a REST call is made to the ixo Explorer that contians the current state of the the blockchain.  If provate information needs ot be accessed than a signed request is submitted to the PDS which will respond withthe data if the the signature and capabilited of the user adhere to the policies for that data.",
            "title": "Read Messages"
        },
        {
            "location": "/#pilots",
            "text": "",
            "title": "Pilots"
        },
        {
            "location": "/#amply",
            "text": "Amply is a MVP project that we have built to prove the utility of the ixo protocol.  The code for this project can be found on our  Amply github repository .",
            "title": "Amply"
        },
        {
            "location": "/documentation/",
            "text": "Documentation\n\n\nThe ixo project is made up of the following key components namely:\n\n\n\n\nWeb Portal\n\n\nKeysafe Browser Extension\n\n\nixo NPM Module\n \n\n\nProject Datastore\n\n\nixo Blockchain\n\n\nixo Explorer\n\n\nSchemas\n \n\n\nDocumentation\n \n\n\n\n\n\n\nWeb Portal\n\n\n \nhttps://github.com/ixofoundation/ixo-web\n\n\nA reference implementation of the web portal of the ixo protocol\n\nTODO\n\n\nKeysafe Browser Extension\n\n\n \nhttps://github.com/ixofoundation/ixo-keysafe-browser-extension\n\n\nThe ixo-keysafe-browser-extension provides signing capabilities for the ixo web frontend. It is fork from the \nMetaMask\n browser extension, but now uses Sovrin generated DID's as user credentials.\n\n\nKeysafe Browser Extension API\n\n\nixo NPM Module\n\n\n \nhttps://github.com/ixofoundation/ixo-module\n\n\nAn npm package that wrappers the communication to the ixo backend services and provides usable services to a Javascript application.\n\n\nixo NPM Module API\n\n\nProject Datastore\n\n\n \nhttps://github.com/ixofoundation/ixo-pds\n\n\nA reference implemenation of a project data store. The ixo-pds builds a fully functional docker image to process and store claims and evaluations and then adds a record of these interactoins to the ixo Blockchain\n\n\nProject Datastore API\n\n\nixo Blockchain\n\n\n \nhttps://github.com/ixofoundation/ixo-cosmos\n\n\nBuilt on top of Tendermint and using the cosmos SDK, the ixo blockchain records the projects, claims and evaluations that are created through using the ixo-protocol\n\n\nixo Blockchain API\n\n\nixo Explorer\n\n\n \nhttps://github.com/ixofoundation/ixo-block-sync\n\n\nThe ixo Explorer provides a set of simple API's to access the publically available project documentation.  It synchronises off the ixo blockchain and stores the current state of projects.\n\n\nixo Explorer API\n\n\nSchemas\n\n\n \nhttps://github.com/ixofoundation/schem\n\n\nA repository for holding schema templates for the ixo Protocol\n\n\nFolder Structure\n\n\n/projects\n - Project Templates\n\n\n/agents\n - Agent Templates\n\n\n/claims\n - Claim Templates\n\n\n/evaluations\n - Evaluation Templates\n\n\nTemplate Schemas\n\n\n\n\nThe following needs to be updated *\n\n\n\n\nAll Templates follow the \nJSON-LD\n structure examples can be found at \nSchema.org\n\n\nExample:\n\n\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n  }\n}\n\n\n\n\nTemplates\n\n\nTemplates describe the labels, input type and the optionality of fields.  These are used on the client side for rendering schemas.\n\n\nTemplates consist of a single data element called \nentities\n which is an array of the fields/entities that need to be rendered on screen. Each entity has three mandatory values:\n\n\nlabel\n - The label for the input\n\n\nname\n - The name of the input which must be present in the schema and uses dot notation for complex types\n\n\ntype\n - The which describes how the input should be captured\n\n\noptional\n - Determines whether the entity is required or optional (Defaults to \nfalse\n)\n\n\noptions\n - Only used if the type is \nselect\n and contains a list of \nlabels\n and \nvalues\n.\n\n\nhidden\n - If \ntrue\n do not display this field.  Defaults to \nfalse\n\n\nExample:\n\n\n\"options\": [\n  {\n    \"label\": \"Identity Document\", \n    \"value\": \"id\"\n  },\n  {\n    \"label\": \"Passport\",\n    \"value\": \"passport\"\n  }\n]\n\n\n\n\nTemplate Types\n\n\ntext\n - Renders a text input\n\n\ntextarea\n - Renders a multiline text input\n\n\ncountry\n - Renders a selection box containing a list of country names and returns the (ISO 3166-2)[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]\n\n\nselect\n - Generic selection box containing a list of options.  If this type is selected the \noption\n value must also be set.\n\n\nimage\n - Renders an image or allows one to be uploaded\n\n\nDocumentation\n\n\n \nhttps://github.com/ixofoundation/mkdocs\n\n\nThe repository contains the documentaion for the ixo system and is build using mkdocs.  It builds the content for this site.",
            "title": "Documentation"
        },
        {
            "location": "/documentation/#documentation",
            "text": "The ixo project is made up of the following key components namely:   Web Portal  Keysafe Browser Extension  ixo NPM Module    Project Datastore  ixo Blockchain  ixo Explorer  Schemas    Documentation",
            "title": "Documentation"
        },
        {
            "location": "/documentation/#web-portal",
            "text": "https://github.com/ixofoundation/ixo-web  A reference implementation of the web portal of the ixo protocol TODO",
            "title": "Web Portal"
        },
        {
            "location": "/documentation/#keysafe-browser-extension",
            "text": "https://github.com/ixofoundation/ixo-keysafe-browser-extension  The ixo-keysafe-browser-extension provides signing capabilities for the ixo web frontend. It is fork from the  MetaMask  browser extension, but now uses Sovrin generated DID's as user credentials.  Keysafe Browser Extension API",
            "title": "Keysafe Browser Extension"
        },
        {
            "location": "/documentation/#ixo-npm-module",
            "text": "https://github.com/ixofoundation/ixo-module  An npm package that wrappers the communication to the ixo backend services and provides usable services to a Javascript application.  ixo NPM Module API",
            "title": "ixo NPM Module"
        },
        {
            "location": "/documentation/#project-datastore",
            "text": "https://github.com/ixofoundation/ixo-pds  A reference implemenation of a project data store. The ixo-pds builds a fully functional docker image to process and store claims and evaluations and then adds a record of these interactoins to the ixo Blockchain  Project Datastore API",
            "title": "Project Datastore"
        },
        {
            "location": "/documentation/#ixo-blockchain",
            "text": "https://github.com/ixofoundation/ixo-cosmos  Built on top of Tendermint and using the cosmos SDK, the ixo blockchain records the projects, claims and evaluations that are created through using the ixo-protocol  ixo Blockchain API",
            "title": "ixo Blockchain"
        },
        {
            "location": "/documentation/#ixo-explorer",
            "text": "https://github.com/ixofoundation/ixo-block-sync  The ixo Explorer provides a set of simple API's to access the publically available project documentation.  It synchronises off the ixo blockchain and stores the current state of projects.  ixo Explorer API",
            "title": "ixo Explorer"
        },
        {
            "location": "/documentation/#schemas",
            "text": "https://github.com/ixofoundation/schem  A repository for holding schema templates for the ixo Protocol",
            "title": "Schemas"
        },
        {
            "location": "/documentation/#folder-structure",
            "text": "/projects  - Project Templates  /agents  - Agent Templates  /claims  - Claim Templates  /evaluations  - Evaluation Templates",
            "title": "Folder Structure"
        },
        {
            "location": "/documentation/#template-schemas",
            "text": "The following needs to be updated *   All Templates follow the  JSON-LD  structure examples can be found at  Schema.org  Example:  {\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n  }\n}",
            "title": "Template Schemas"
        },
        {
            "location": "/documentation/#templates",
            "text": "Templates describe the labels, input type and the optionality of fields.  These are used on the client side for rendering schemas.  Templates consist of a single data element called  entities  which is an array of the fields/entities that need to be rendered on screen. Each entity has three mandatory values:  label  - The label for the input  name  - The name of the input which must be present in the schema and uses dot notation for complex types  type  - The which describes how the input should be captured  optional  - Determines whether the entity is required or optional (Defaults to  false )  options  - Only used if the type is  select  and contains a list of  labels  and  values .  hidden  - If  true  do not display this field.  Defaults to  false  Example:  \"options\": [\n  {\n    \"label\": \"Identity Document\", \n    \"value\": \"id\"\n  },\n  {\n    \"label\": \"Passport\",\n    \"value\": \"passport\"\n  }\n]",
            "title": "Templates"
        },
        {
            "location": "/documentation/#template-types",
            "text": "text  - Renders a text input  textarea  - Renders a multiline text input  country  - Renders a selection box containing a list of country names and returns the (ISO 3166-2)[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]  select  - Generic selection box containing a list of options.  If this type is selected the  option  value must also be set.  image  - Renders an image or allows one to be uploaded",
            "title": "Template Types"
        },
        {
            "location": "/documentation/#documentation_1",
            "text": "https://github.com/ixofoundation/mkdocs  The repository contains the documentaion for the ixo system and is build using mkdocs.  It builds the content for this site.",
            "title": "Documentation"
        },
        {
            "location": "/api/",
            "text": "API\n\n\nThe ixo platform has a number of different components that each has a set of APIs\n\n\nixo NPM module API\n\n\nThe ixo NPM module makes it easier to interact withthe project data stores and the ixo blockchain\n\n\nnpm install --save ixo-module\n\n\nTo Create new Ixo Object (Without provider)\n\n\nimport Ixo from 'ixo-module';\nvar ixo = new Ixo('ixo_node_url')\n\n\n\n\nProject Functions\n\n\nFunctions pertaining to projects. These calls take the form \nixo.project.<functionName>\n\n\nList Projects\n\n\nReturns a list of all projects\n\n\nRequest:\n\n\nixo.project.listProjects().then((result) => {\n    console.log('Project List: ' + result)\n})   \n\n\n\n\nResponse: \nixo Explorer: listProjects\n\n\nGet Project\n\n\nRetrieves public project details by DID\n\n\nlet projectDid = 'did:ixo:TknEju4pjyRQvVehivZ82x';\nixo.project.getProjectByDid(projectDid).then((result) => {\n    console.log('Project Details: ' + result)\n})   \n\n\n\n\nResponse: \nixo Explorer: getProject\n\n\nCreate Project\n\n\nixo.project.createProject(projectData, signature, PDSUrl).then((result) => {\n    console.log('Project Details: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: createProject\n\n\nUpload a Document\n\n\nFunction to upload a dataUrl to the project.  It returns a unique reference to the data so it can be retrieved at a later stage. It is used for uploading images and json templates, but it could countain any other project specific public data.\n\n\nThe \ndataUrl\n takes the form of \ndata:<mediatype>;<encoding>,<data>\n\n\n// Upload an image\nlet dataUrl = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUA AAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO 9TXL0Y4OHwAAAABJRU5ErkJggg==';\nixo.project.createPublic(dataUrl, PDSUrl) {\n    console.log('Document hash: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: createPublic\n\n\nRetrieve a Document\n\n\nRetrieves a previously uploaded document using the document hash\n\n\nixo.project.fetchPublic(documentHash, PDSUrl) {\n    console.log('Document hash: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: fetchPublic\n\n\nAgent Functions\n\n\nFunctions pertaining to agents on projects.  These calls take the form \nixo.agent.<functionName>\n\n\nList Agents on a Project\n\n\nReturns a list of all agents on a project\n\n\nRequest:\n\n\nixo.agent.listAgentsForProject(data, signature, PDSUrl).then((result) => {\n    console.log('Agent List: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: listAgents\n\n\nCreate an Agent on a Project\n\n\nCreate an agents on a project\n\n\nRequest:\n\n\nixo.agent.createAgent(agentData, signature, PDSUrl).then((result) => {\n    console.log('Create Agent: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: createAgent\n\n\nUpdate Agent Status\n\n\nUpdate an agent's status on a project\n\n\nValid statuses are:\n\n\n\n\n\n\n\n\nStatus\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nPending\n\n\n0\n\n\n\n\n\n\nApproved\n\n\n1\n\n\n\n\n\n\nRevoked\n\n\n2\n\n\n\n\n\n\n\n\nRequest:\n\n\nixo.agent.createAgent(agentData, signature, PDSUrl).then((result) => {\n    console.log('Update Agent Status: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: updateAgentStatus\n\n\nClaim Functions\n\n\nFunctions pertaining to agents on projects.  These calls take the form \nixo.claim.<functionName>\n\n\nList Claims on a Project\n\n\nReturns a list of all claims on a project\n\n\nRequest:\n\n\nixo.claim.listClaimsForProject(data, signature, PDSUrl).then((result) => {\n    console.log('Claim List: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: listClaimsForProject\n\n\nCreate a Claim on a Project\n\n\nCreate a claim on a project\n\n\nRequest:\n\n\nixo.agent.createClaim(agentData, signature, PDSUrl).then((result) => {\n    console.log('Create Claim: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: createClaim\n\n\nEvaluate a Claim\n\n\nCreate an evaluation for a claim\n\n\nValid statuses are:\n\n\n\n\n\n\n\n\nStatus\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nPending\n\n\n0\n\n\n\n\n\n\nApproved\n\n\n1\n\n\n\n\n\n\nRejected\n\n\n2\n\n\n\n\n\n\n\n\nRequest:\n\n\nixo.agent.evaluateClaim(evaluationData, signature, PDSUrl).then((result) => {\n    console.log('Create Evaluation: ' + result)\n})   \n\n\n\n\nResponse: \nPDS: evaluateClaim\n\n\nUser Functions\n\n\nRegister DID Doc to Blockchain\n\n\nRegisters a new user with the supplied DID document to the blockchain\n\n\nRequest:\n\n\nixo.user.registerUserDid().then((result) => {\n    console.log('Register DID: ' + result)\n})   \n\n\n\n\nResponse: \nixo Blockchain: registerUserDid\n\n\nGet the DID Doc from Blockchain\n\n\nRetrieves the DID Doc from the blockchain for the specified DID\n\n\nRequest:\n\n\nLet did = 'did:sov:2p19P17cr6XavfMJ8htYSS';\nixo.user.getDidDoc(did).then((result) => {\n    console.log('DID Doc: ' + result)\n})   \n\n\n\n\nResponse: \nixo Blockchain: getDidDoc\n\n\nMetrics\n\n\nReturns the global statistics for all projects\n\n\nRequest:\n\n\nixo.stats.getGlobalStats().then((result) => {\n    console.log('Statistics: ' + result)\n})   \n\n\n\n\nResponse: \nixo Explorer: getGlobalStats\n\n\nHealth Check Functions\n\n\nHeath Check to Blockchain node\n\n\nRequest:\n\n\nixo.network.pingIxoBlockchain().then((result) => {\n    console.log('Health Check: ' + result)\n})   \n\n\n\n\nResponse: \nixo Blockchain: healthCheck\n\n\nHeath Check to Explorer node\n\n\nRequest:\n\n\nixo.network.pingIxoExplorer().then((result) => {\n    console.log('Health Check: ' + result)\n})   \n\n\n\n\nResponse: \nixo Explorer: ping\n\n\nKeysafe Browser Extension API\n\n\nWhen the keysafe extension is added to the browser it injects a globale on the the \nwindow\n object.  It can be accessed as follows:\n\n\nconst IxoInpageProvider = window['ixoKs'];\nlet keysafe = new IxoInpageProvider();\n\n\n\n\nInfo Functions\n\n\nGet User Information\n\n\nReturns a javascript object contain the user name and the DID Doc\n\n\nRequest:\n\n\nkeysafe.getInfo().then((error, result) => {\n    if (result) {\n        console.log('User Info: ' + result)\n    } else {\n        console.log(error)\n    }\n})   \n\n\n\n\nResponse: \n\n\n{\n    name: \"John\",\n    didDoc: {\n        \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n        \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\"\n    }\n}\n\n\n\n\nGet User DID Doc\n\n\nReturns a javascript object contain the user's DID Doc\n\n\nRequest:\n\n\nkeysafe.getDidDoc().then((error, result) => {\n    if (result) {\n        console.log('User DID Doc: ' + result)\n    } else {\n        console.log(error)\n    }\n})   \n\n\n\n\nResponse: \n\n\n{\n  \"did\": \"2HQrdvfjqZwRQCapLDPZzY\",\n  \"pubKey\": \"hZHiC5kPgiADRXnuiktvmsNSPH1D4c96NxMSjjNLVTY\",\n}\n\n\n\n\nSigning Functions\n\n\nRequest Signing\n\n\nRequest the user to sign some data using the keys in the keysafe\n\n\nkeysafe.requestSigning(JSON.stringify(data), (error, signature) => {    \n    if (!error) {\n        console.log(\"Signature: \" + signature);\n    } else {\n        console.log(error);\n    }\n});\n\n\n\n\nResponse: \n\n\nA011D11A2D91A9CB03ECFFB7D9AFC1001DB56B3DABF42BDD0F4D00352A9B8E0E73E85F0B4586DA2934696C0A78602EEB047EA6B3D9096C1A0C3FB144E6A51C09\n\n\nProject Datastore API\n\n\nThe project data store holds the data relating to projects.  The API is split into a public API and a non public API. The public API requests do not require cryptographic signatures, while all other requests must be signed and adher to the capabilities that have been granted to the signer.\n\n\nPublic API\n\n\nURI: \n<pds server>/api/public\n\n\nRequest type: \nPOST\n\n\nStructure: \n\n{\"jsonrpc\": \"2.0\", \"method\": \"<method name>\",  \"id\": <message id>,     \"params\": <json data object> }\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n<node server>\n\n\nThe URL of the server\n\n\n\n\n\n\n<entity>\n\n\nThe entity to send the method\n\n\n\n\n\n\n<method name>\n\n\nThe name of the method to call defined in the config file\n\n\n\n\n\n\n<message id>\n\n\nThe message ID, used to correlate asynchronous responses\n\n\n\n\n\n\n<json data object>\n\n\nThe parameters that are passed to the method handler\n\n\n\n\n\n\n\n\nStructure of params object\n\n\nThese are unsigned requests for publicly available information. A key is generated and sent back to the client, to be used in retrieval of information. \nData will accept any of the following encodings: \"ascii\" | \"utf8\" | \"utf16le\" | \"ucs2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\".\ncontentType should reference a MIME type. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n\n\n{\n    \"jsonrpc\":\"2.0\", \n    \"method\":\"createPublic\",\n    \"id\": 123,\n    \"params\": {\n        \"data\": \"bob public message\", \n        \"contentType\": \"text\"\n        }\n}\n\n\n\n\n\n\n\nUpload an image\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createPublic\", \n    \"id\": 3, \n    \"params\": \n        {\n        \"data\": \"<base64 encoded image>\", \n        \"contentType\": \"image/png\"\n        }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": \"<string>\"\n}\n\n\n\n\n\n\nFetch image\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n     \"method\": \"fetchPublic\", \n     \"id\": 3, \n     \"params\": {\"key\": <string>}\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"data\": \"<base64 encoded image>\",\n        \"contentType\": \"image/png\"\n    }\n}\n\n\n\n\n\n\nUpload a Json file\n\n\nRequest:\n\n\n{\n     \"jsonrpc\": \"2.0\", \n     \"method\": \"createPublic\", \n     \"id\": 3, \n     \"params\": \n    {\n       \"data\": \"<JSON string>\", \n       \"contentType\": \"application/json\"\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": \"<string>\"\n}\n\n\n\n\n\n\nFetch Json file\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n     \"method\": \"fetchPublic\", \n     \"id\": 3, \n     \"params\": {\"key\": <string>}\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"data\": \"<JSON string>\",\n        \"contentType\": \"application/json\"\n    }\n}\n\n\n\n\nPrivate API\n\n\nURI: \n<pds server>/api/request\n\n\nRequest type: \nPOST\n\n\nStructure: \n\n{\"jsonrpc\": \"2.0\", \"method\": \"<method name>\",  \"id\": <message id>,     \"params\": <json data object> }\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n<node server>\n\n\nThe URL of the server\n\n\n\n\n\n\n<entity>\n\n\nThe entity to send the method\n\n\n\n\n\n\n<method name>\n\n\nThe name of the method to call defined in the config file\n\n\n\n\n\n\n<message id>\n\n\nThe message ID, used to correlate asynchronous responses\n\n\n\n\n\n\n<json data object>\n\n\nThe parameters that are passed to the method handler\n\n\n\n\n\n\n\n\nStructure of params object\n\n\nEverything in the payload section is signed to create a signature.  It should be packed using \nJSON.stringify()\n method before signing. \n\n\n{\n    \"jsonrpc\":\"2.0\", \n    \"method\":\"createAgent\",\n    \"id\": 123,\n    \"params\": {\n        \"payload\": {\n\n            \"template\": {\n                \"name\": \"create_agent\"\n            },\n            \"data\": {\"projectDid\": \"did:ixo:TknEju4pjyRQvVehivZ82x\",\n                     \"name\": \"Brennon\",\n                     \"surname\": \"Hampton\",\n                     \"email\": \"brennon@me.com\",\n                     \"agentDid\": \"did:sov:64\",\n                     \"role\": \"SA\"}\n        },\n        \"signature\": {\n            \"type\": \"ed25519-sha-256\",\n            \"created\": \"2018-06-27T16:02:20Z\", \n            \"creator\": \"did:sov:2p19P17cr6XavfMJ8htYSS\",\n            \"signatureValue\": \"A011D11A2D91A9CB03ECFFB7D9AFC1001DB56B3DABF42BDD0F4D00352A9B8E0E73E85F0B4586DA2934696C0A78602EEB047EA6B3D9096C1A0C3FB144E6A51C09\"\n        }\n    }\n}\n\n\n\n\n\n\n\nCreate Project\n\n\nCreates a new project.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createProject\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <create project data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nExample:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"createProject\",\n    \"id\": 123,\n    \"params\": {\n        \"payload\": {\n            \"template\": {\n                \"name\": \"create_project\"\n            },\n            \"data\": {\n                \"title\": \"Test Water project\",\n                \"ownerName\": \"Don\",\n                \"ownerEmail\": \"don@gmail.com\",\n                \"shortDescription\": \"Project for water\",\n                \"longDescription\": \"project to save water for areas with drought\",\n                \"impactAction\": \"litres of water saved\",\n                \"projectLocation\": \"ZA\",\n                \"sdgs\": [\n                  \"12.2\",\n                  \"3\",\n                  \"2.4\"\n                ],\n                \"requiredClaims\": 30,\n                \"templates\": {\n                  \"claim\": {\n                    \"schema\": \"af175axcn6ejiuds0sh\",\n                    \"form\": \"1v6v8a6woabjiuds3i9\"\n                  }\n                },\n                \"evaluatorPayPerClaim\": \"0\",\n                \"socialMedia\": {\n                  \"facebookLink\": \"https://www.facebook.com/ixofoundation/\",\n                  \"instagramLink\": \"\",\n                  \"twitterLink\": \"\",\n                  \"webLink\": \"https://ixo.foundation\"\n                },\n                \"serviceEndpoint\": \"http://35.192.187.110:5000/\",\n                \"imageLink\": \"pc16l7yk62ejiudrox5\",\n                \"founder\": {\n                  \"name\": \"Nic\",\n                  \"email\": \"nic@test.co.za\",\n                  \"countryOfOrigin\": \"ZA\",\n                  \"shortDescription\": \"primary description for founder\",\n                  \"websiteURL\": \"www.water.com\",\n                  \"logoLink\": \"\"\n                }\n            }\n        },\n         \"signature\": {\n            \"type\": \"ed25519-sha-256\",\n            \"created\": \"2018-06-05T12:35:02Z\", \n            \"creator\": \"did:sov:2p19P17cr6XavfMJ8htYSS\",\n            \"signatureValue\": \"23EED2462B11B94C9F63A509B39F15CB9C0B2DB8C16A52A22115B755BF3F6BDF7ABB8881697AA7DB6F4AFBD7C5DE4618B403AB43B738841BB89E72C8792AC401\"\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <project data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n    }\n}\n\n\n\n\nExample:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 123,\n    \"result\": {\n        \"_id\": \"5b32094f05aa3f0011405957\",\n        \"title\": \"Test Water project\",\n        \"ownerName\": \"Don\",\n        \"ownerEmail\": \"don@gmail.com\",\n        \"shortDescription\": \"Project for water\",\n        \"longDescription\": \"project to save water for areas with drought\",\n        \"impactAction\": \"litres of water saved\",\n        \"projectLocation\": \"ZA\",\n        \"sdgs\": [\n            \"12.2\",\n            \"3\",\n            \"2.4\"\n        ],\n        \"requiredClaims\": 30,\n        \"templates\": {\n            \"claim\": {\n                \"schema\": \"af175axcn6ejiuds0sh\",\n                \"form\": \"1v6v8a6woabjiuds3i9\"\n            }\n        },\n        \"evaluatorPayPerClaim\": \"0\",\n        \"socialMedia\": {\n            \"facebookLink\": \"https://www.facebook.com/ixofoundation/\",\n            \"instagramLink\": \"\",\n            \"twitterLink\": \"\",\n            \"webLink\": \"https://ixo.foundation\"\n        },\n        \"serviceEndpoint\": \"http://35.192.187.110:5000/\",\n        \"imageLink\": \"pc16l7yk62ejiudrox5\",\n        \"founder\": {\n            \"name\": \"Nic\",\n            \"email\": \"nic@test.co.za\",\n            \"countryOfOrigin\": \"ZA\",\n            \"shortDescription\": \"primary description for founder\",\n            \"websiteURL\": \"www.water.com\",\n            \"logoLink\": \"\"\n        },\n        \"txHash\": \"a09c8bc12a3e7cc1f859f0fc98cd37880d8c894826e0f1fa7a3f824db37941f5\",\n        \"__v\": 0\n    }\n}\n\n\n\n\n\n\nCreate Agent\n\n\nCreates a new agent.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createAgent\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <create agent data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <agent data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}\n\n\n\n\n\n\nUpdate Agent Status\n\n\nUpdate Agent Status\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"updateAgentStatus\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <update agent data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <agent data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"did\": <creator's did>\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}\n\n\n\n\n\n\nList Agents\n\n\nList claims and latest status.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"listAgents\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <data to filter>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": [\n        {\n            <agent data>,\n            \"currentStatus\": {\n                <agent status data>\n            }\n        }\n    ]\n}\n\n\n\n\n\n\nSubmit Claim\n\n\nCreates a new claim.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"submitClaim\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <submit claim data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <claim data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\"\n    }\n}\n\n\n\n\n\n\nEvaluate Claim\n\n\nEvaluate a new claim.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"evaluateClaim\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <evaluate claim data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <claim data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}\n\n\n\n\nList Claim\n\n\nList claims and latest status.\n\n\nRequest:\n\n\n{\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"listClaims\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <data to filter>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}\n\n\n\n\nResponse:\n\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": [\n        {\n            <claim data>,\n            \"evaluations\": {\n                <claim status data>\n            }\n        }\n    ]\n}\n\n\n\n\nHeath Check Functions\n\n\nHealth Check\n\n\nURI: \n<pds server>/\n\n\nRequest type: \nGET\n\n\nResponse:\n\n\nAPI is running\n\n\n\n\nThe ixo project data store (pds) uses JSON-RPC to receive client requests.  The structure of all calls follow the same structure:\n\n\nixo Blockchain API\n\n\nDID Functions\n\n\n\n\nRegister DID Doc\n\n\nRegisters the DID Doc for the specified DID.  The DID Doc must contain the DID and the public key which can be used to verify signatures sign by this DID.\n\n\nRequest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nServer:\n\n\nBlockchain TX Server\n\n\n\n\n\n\nMethod:\n\n\nGET\n\n\n\n\n\n\nURI:\n\n\n/broadcast_tx_sync?tx=\n\n\n\n\n\n\nParameters:\n\n\n<uppercase hex of the DID Doc with its signature preceded with Ox>\n\n\n\n\n\n\n\n\nExample Request:\n\nhttp://localhost:46657/broadcast_tx_sync?tx=0x7B227...355430383A34363A31372B30323030227D7D\n\n\nExample Parameter (pre hex encoding):\n\n\n{\"payload\":[10,{\"didDoc\":{\"did\":\"did:sov:398fM9kMgHuNbCtRncYrwh\",\"pubKey\":\"2Af4UzgUAgQk8Wt5xEkfJrjQSxWgxsuD8bzDQJSNfMSw\",\"credentials\":[]}}],\"signature\":{\"signatureValue\":[1,\"211678D20C70292668C47D6220ED648F868DFE0CBB848EDB0E163F7EE35467F938CFB000FCCF1AD00A0AB67F6EEB6C02E4FE48D793247A7092D5B5613C87C405\"],\"created\":\"2018-06-05T08:46:17Z\"}}\n\n\n\n\nResponse:\n\n\n{\n  \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n  \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\",\n  \"credentials\": [\n    {   \n        \"credential\":{\n            \"type\": [\"Credential\",\"ProofOfKYC\"],\n            \"issuer\": \"DHHeFW9G17McBUk45ty7Jn\",\n            \"issued\": \"2018-07-16T15:51:44Z\",\n            \"claim\": {\n                \"id\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n                \"KYCValidated\": true\n            }\n        }\n    }\n  ]\n}\n\n\n\n\n\n\nAdd a Credential to a DID Doc\n\n\nAdds a signed credential to the DID Doc for the specified DID.  The Credential must be signed by the DID of the credential issuer and the credential issuer's DID must already be registered.\n\n\nRequest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nServer:\n\n\nBlockchain TX Server\n\n\n\n\n\n\nMethod:\n\n\nGET\n\n\n\n\n\n\nURI:\n\n\n/broadcast_tx_sync?tx=\n\n\n\n\n\n\nParameters:\n\n\n<uppercase hex of the Add Credential Message with its signature preceded with Ox>\n\n\n\n\n\n\n\n\nExample Request:\n\nhttp://localhost:46657/broadcast_tx_sync?tx=0x7B227...355430383A34363A31372B30323030227D7D\n\n\nExample Parameter (pre hex encoding):\n\n\n{\"payload\":[24,{\"credential\":{\"type\":[\"Credential\",\"ProofOfKYC\"],\"issuer\":\"DHHeFW9G17McBUk45ty7Jn\",\"issued\": \"2018-07-16T15:51:44+02:00\",\"claim\":{\"id\":\"DHHeFW9G17McBUk45ty7Jn\",\"KYCValidated\":true}}}],\"signature\":{\"signatureValue\":[1,\"8EA7D3D45C95863E5C7CD1A4043D5F618E32F41CA72FAE75B7C09377D2B6AFC9AE8844AF0B621216339F025C67428B1838C8A1BBCD48E761655EBA9CCF114502\"],\"created\":\"2018-07-16T14:39:31Z\"}}\n\n\n\n\nResponse:\n\n\n{\n    jsonrpc: \"2.0\",\n    id: \"\",\n    result: {\n        code: 0,\n        datan        log: \"\",\n        hash: \"91C033E74E27E7778BD0FE3481F82F839C92C5BC\"\n    }\n}\n\n\n\n\n\n\nGet Did Doc\n\n\nReturns the Did Doc for the specified DID.  This contains the public key which can be used to verify signatures sign by this DID.\n\n\nRequest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nServer:\n\n\nBlockchain REST Server\n\n\n\n\n\n\nMethod:\n\n\nGET\n\n\n\n\n\n\nURI:\n\n\n/did\n\n\n\n\n\n\nParameters:\n\n\n<did>\n\n\n\n\n\n\n\n\nExample:\n\nhttp://localhost:1317/did/did.sov.EvBFmtyRaBuMNMnwjHNVgn\n\n\nResponse:\n\n\n{\n  \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n  \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\"\n  \"credentials\": [\n    {\n      \"type\": \"KYC\",\n      \"data\": \"KYC Authentication Service\",\n      \"signer\": \"DHHeFW9G17McBUk45ty7Jn\"\n    }\n  ]\n}\n\n\n\n\nHealth Check Functions\n\n\n\n\nHeath Check\n\n\nCheck whether the blockchain node is available\n\n\nRequest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nServer:\n\n\nBlockchain TX Server\n\n\n\n\n\n\nMethod:\n\n\nGET\n\n\n\n\n\n\nURI:\n\n\n/heath\n\n\n\n\n\n\n\n\nExample:\n\nhttp://localhost:46657/health\n\n\nResponse:\n\n\n{\njsonrpc: \"2.0\",\nid: \"\",\nresult: { }\n}\n\n\n\n\nixo Explorer API\n\n\nReturns a the publicly available data pertaining to projects\n\n\nProject Functions\n\n\n\n\nList Projects\n\n\nLists all the projects\n\n\n\n\nGet Project\n\n\nRetrieves a project by project DID\n\n\n\n\nGet Global Stats\n\n\nRetrieves the global statistics and metrics for all projects\n\n\nHealth Check Functions\n\n\n\n\nHeath Check\n\n\nCheck that the explorer node is available",
            "title": "API"
        },
        {
            "location": "/api/#api",
            "text": "The ixo platform has a number of different components that each has a set of APIs",
            "title": "API"
        },
        {
            "location": "/api/#ixo-npm-module-api",
            "text": "The ixo NPM module makes it easier to interact withthe project data stores and the ixo blockchain  npm install --save ixo-module  To Create new Ixo Object (Without provider)  import Ixo from 'ixo-module';\nvar ixo = new Ixo('ixo_node_url')",
            "title": "ixo NPM module API"
        },
        {
            "location": "/api/#project-functions",
            "text": "Functions pertaining to projects. These calls take the form  ixo.project.<functionName>",
            "title": "Project Functions"
        },
        {
            "location": "/api/#list-projects",
            "text": "Returns a list of all projects  Request:  ixo.project.listProjects().then((result) => {\n    console.log('Project List: ' + result)\n})     Response:  ixo Explorer: listProjects",
            "title": "List Projects"
        },
        {
            "location": "/api/#get-project",
            "text": "Retrieves public project details by DID  let projectDid = 'did:ixo:TknEju4pjyRQvVehivZ82x';\nixo.project.getProjectByDid(projectDid).then((result) => {\n    console.log('Project Details: ' + result)\n})     Response:  ixo Explorer: getProject",
            "title": "Get Project"
        },
        {
            "location": "/api/#create-project",
            "text": "ixo.project.createProject(projectData, signature, PDSUrl).then((result) => {\n    console.log('Project Details: ' + result)\n})     Response:  PDS: createProject",
            "title": "Create Project"
        },
        {
            "location": "/api/#upload-a-document",
            "text": "Function to upload a dataUrl to the project.  It returns a unique reference to the data so it can be retrieved at a later stage. It is used for uploading images and json templates, but it could countain any other project specific public data.  The  dataUrl  takes the form of  data:<mediatype>;<encoding>,<data>  // Upload an image\nlet dataUrl = 'data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUA AAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO 9TXL0Y4OHwAAAABJRU5ErkJggg==';\nixo.project.createPublic(dataUrl, PDSUrl) {\n    console.log('Document hash: ' + result)\n})     Response:  PDS: createPublic",
            "title": "Upload a Document"
        },
        {
            "location": "/api/#retrieve-a-document",
            "text": "Retrieves a previously uploaded document using the document hash  ixo.project.fetchPublic(documentHash, PDSUrl) {\n    console.log('Document hash: ' + result)\n})     Response:  PDS: fetchPublic",
            "title": "Retrieve a Document"
        },
        {
            "location": "/api/#agent-functions",
            "text": "Functions pertaining to agents on projects.  These calls take the form  ixo.agent.<functionName>",
            "title": "Agent Functions"
        },
        {
            "location": "/api/#list-agents-on-a-project",
            "text": "Returns a list of all agents on a project  Request:  ixo.agent.listAgentsForProject(data, signature, PDSUrl).then((result) => {\n    console.log('Agent List: ' + result)\n})     Response:  PDS: listAgents",
            "title": "List Agents on a Project"
        },
        {
            "location": "/api/#create-an-agent-on-a-project",
            "text": "Create an agents on a project  Request:  ixo.agent.createAgent(agentData, signature, PDSUrl).then((result) => {\n    console.log('Create Agent: ' + result)\n})     Response:  PDS: createAgent",
            "title": "Create an Agent on a Project"
        },
        {
            "location": "/api/#update-agent-status",
            "text": "Update an agent's status on a project  Valid statuses are:     Status  Value      Pending  0    Approved  1    Revoked  2     Request:  ixo.agent.createAgent(agentData, signature, PDSUrl).then((result) => {\n    console.log('Update Agent Status: ' + result)\n})     Response:  PDS: updateAgentStatus",
            "title": "Update Agent Status"
        },
        {
            "location": "/api/#claim-functions",
            "text": "Functions pertaining to agents on projects.  These calls take the form  ixo.claim.<functionName>",
            "title": "Claim Functions"
        },
        {
            "location": "/api/#list-claims-on-a-project",
            "text": "Returns a list of all claims on a project  Request:  ixo.claim.listClaimsForProject(data, signature, PDSUrl).then((result) => {\n    console.log('Claim List: ' + result)\n})     Response:  PDS: listClaimsForProject",
            "title": "List Claims on a Project"
        },
        {
            "location": "/api/#create-a-claim-on-a-project",
            "text": "Create a claim on a project  Request:  ixo.agent.createClaim(agentData, signature, PDSUrl).then((result) => {\n    console.log('Create Claim: ' + result)\n})     Response:  PDS: createClaim",
            "title": "Create a Claim on a Project"
        },
        {
            "location": "/api/#evaluate-a-claim",
            "text": "Create an evaluation for a claim  Valid statuses are:     Status  Value      Pending  0    Approved  1    Rejected  2     Request:  ixo.agent.evaluateClaim(evaluationData, signature, PDSUrl).then((result) => {\n    console.log('Create Evaluation: ' + result)\n})     Response:  PDS: evaluateClaim",
            "title": "Evaluate a Claim"
        },
        {
            "location": "/api/#user-functions",
            "text": "",
            "title": "User Functions"
        },
        {
            "location": "/api/#register-did-doc-to-blockchain",
            "text": "Registers a new user with the supplied DID document to the blockchain  Request:  ixo.user.registerUserDid().then((result) => {\n    console.log('Register DID: ' + result)\n})     Response:  ixo Blockchain: registerUserDid",
            "title": "Register DID Doc to Blockchain"
        },
        {
            "location": "/api/#get-the-did-doc-from-blockchain",
            "text": "Retrieves the DID Doc from the blockchain for the specified DID  Request:  Let did = 'did:sov:2p19P17cr6XavfMJ8htYSS';\nixo.user.getDidDoc(did).then((result) => {\n    console.log('DID Doc: ' + result)\n})     Response:  ixo Blockchain: getDidDoc",
            "title": "Get the DID Doc from Blockchain"
        },
        {
            "location": "/api/#metrics",
            "text": "Returns the global statistics for all projects  Request:  ixo.stats.getGlobalStats().then((result) => {\n    console.log('Statistics: ' + result)\n})     Response:  ixo Explorer: getGlobalStats",
            "title": "Metrics"
        },
        {
            "location": "/api/#health-check-functions",
            "text": "",
            "title": "Health Check Functions"
        },
        {
            "location": "/api/#heath-check-to-blockchain-node",
            "text": "Request:  ixo.network.pingIxoBlockchain().then((result) => {\n    console.log('Health Check: ' + result)\n})     Response:  ixo Blockchain: healthCheck",
            "title": "Heath Check to Blockchain node"
        },
        {
            "location": "/api/#heath-check-to-explorer-node",
            "text": "Request:  ixo.network.pingIxoExplorer().then((result) => {\n    console.log('Health Check: ' + result)\n})     Response:  ixo Explorer: ping",
            "title": "Heath Check to Explorer node"
        },
        {
            "location": "/api/#keysafe-browser-extension-api",
            "text": "When the keysafe extension is added to the browser it injects a globale on the the  window  object.  It can be accessed as follows:  const IxoInpageProvider = window['ixoKs'];\nlet keysafe = new IxoInpageProvider();",
            "title": "Keysafe Browser Extension API"
        },
        {
            "location": "/api/#info-functions",
            "text": "",
            "title": "Info Functions"
        },
        {
            "location": "/api/#get-user-information",
            "text": "Returns a javascript object contain the user name and the DID Doc  Request:  keysafe.getInfo().then((error, result) => {\n    if (result) {\n        console.log('User Info: ' + result)\n    } else {\n        console.log(error)\n    }\n})     Response:   {\n    name: \"John\",\n    didDoc: {\n        \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n        \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\"\n    }\n}",
            "title": "Get User Information"
        },
        {
            "location": "/api/#get-user-did-doc",
            "text": "Returns a javascript object contain the user's DID Doc  Request:  keysafe.getDidDoc().then((error, result) => {\n    if (result) {\n        console.log('User DID Doc: ' + result)\n    } else {\n        console.log(error)\n    }\n})     Response:   {\n  \"did\": \"2HQrdvfjqZwRQCapLDPZzY\",\n  \"pubKey\": \"hZHiC5kPgiADRXnuiktvmsNSPH1D4c96NxMSjjNLVTY\",\n}",
            "title": "Get User DID Doc"
        },
        {
            "location": "/api/#signing-functions",
            "text": "",
            "title": "Signing Functions"
        },
        {
            "location": "/api/#request-signing",
            "text": "Request the user to sign some data using the keys in the keysafe  keysafe.requestSigning(JSON.stringify(data), (error, signature) => {    \n    if (!error) {\n        console.log(\"Signature: \" + signature);\n    } else {\n        console.log(error);\n    }\n});  Response:   A011D11A2D91A9CB03ECFFB7D9AFC1001DB56B3DABF42BDD0F4D00352A9B8E0E73E85F0B4586DA2934696C0A78602EEB047EA6B3D9096C1A0C3FB144E6A51C09",
            "title": "Request Signing"
        },
        {
            "location": "/api/#project-datastore-api",
            "text": "The project data store holds the data relating to projects.  The API is split into a public API and a non public API. The public API requests do not require cryptographic signatures, while all other requests must be signed and adher to the capabilities that have been granted to the signer.",
            "title": "Project Datastore API"
        },
        {
            "location": "/api/#public-api",
            "text": "URI:  <pds server>/api/public  Request type:  POST  Structure:  {\"jsonrpc\": \"2.0\", \"method\": \"<method name>\",  \"id\": <message id>,     \"params\": <json data object> }     Variable  Description      <node server>  The URL of the server    <entity>  The entity to send the method    <method name>  The name of the method to call defined in the config file    <message id>  The message ID, used to correlate asynchronous responses    <json data object>  The parameters that are passed to the method handler",
            "title": "Public API"
        },
        {
            "location": "/api/#structure-of-params-object",
            "text": "These are unsigned requests for publicly available information. A key is generated and sent back to the client, to be used in retrieval of information. \nData will accept any of the following encodings: \"ascii\" | \"utf8\" | \"utf16le\" | \"ucs2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\".\ncontentType should reference a MIME type. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types  {\n    \"jsonrpc\":\"2.0\", \n    \"method\":\"createPublic\",\n    \"id\": 123,\n    \"params\": {\n        \"data\": \"bob public message\", \n        \"contentType\": \"text\"\n        }\n}",
            "title": "Structure of params object"
        },
        {
            "location": "/api/#upload-an-image",
            "text": "Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createPublic\", \n    \"id\": 3, \n    \"params\": \n        {\n        \"data\": \"<base64 encoded image>\", \n        \"contentType\": \"image/png\"\n        }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": \"<string>\"\n}",
            "title": "Upload an image"
        },
        {
            "location": "/api/#fetch-image",
            "text": "Request:  {\n    \"jsonrpc\": \"2.0\", \n     \"method\": \"fetchPublic\", \n     \"id\": 3, \n     \"params\": {\"key\": <string>}\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"data\": \"<base64 encoded image>\",\n        \"contentType\": \"image/png\"\n    }\n}",
            "title": "Fetch image"
        },
        {
            "location": "/api/#upload-a-json-file",
            "text": "Request:  {\n     \"jsonrpc\": \"2.0\", \n     \"method\": \"createPublic\", \n     \"id\": 3, \n     \"params\": \n    {\n       \"data\": \"<JSON string>\", \n       \"contentType\": \"application/json\"\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": \"<string>\"\n}",
            "title": "Upload a Json file"
        },
        {
            "location": "/api/#fetch-json-file",
            "text": "Request:  {\n    \"jsonrpc\": \"2.0\", \n     \"method\": \"fetchPublic\", \n     \"id\": 3, \n     \"params\": {\"key\": <string>}\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"data\": \"<JSON string>\",\n        \"contentType\": \"application/json\"\n    }\n}",
            "title": "Fetch Json file"
        },
        {
            "location": "/api/#private-api",
            "text": "URI:  <pds server>/api/request  Request type:  POST  Structure:  {\"jsonrpc\": \"2.0\", \"method\": \"<method name>\",  \"id\": <message id>,     \"params\": <json data object> }     Variable  Description      <node server>  The URL of the server    <entity>  The entity to send the method    <method name>  The name of the method to call defined in the config file    <message id>  The message ID, used to correlate asynchronous responses    <json data object>  The parameters that are passed to the method handler",
            "title": "Private API"
        },
        {
            "location": "/api/#structure-of-params-object_1",
            "text": "Everything in the payload section is signed to create a signature.  It should be packed using  JSON.stringify()  method before signing.   {\n    \"jsonrpc\":\"2.0\", \n    \"method\":\"createAgent\",\n    \"id\": 123,\n    \"params\": {\n        \"payload\": {\n\n            \"template\": {\n                \"name\": \"create_agent\"\n            },\n            \"data\": {\"projectDid\": \"did:ixo:TknEju4pjyRQvVehivZ82x\",\n                     \"name\": \"Brennon\",\n                     \"surname\": \"Hampton\",\n                     \"email\": \"brennon@me.com\",\n                     \"agentDid\": \"did:sov:64\",\n                     \"role\": \"SA\"}\n        },\n        \"signature\": {\n            \"type\": \"ed25519-sha-256\",\n            \"created\": \"2018-06-27T16:02:20Z\", \n            \"creator\": \"did:sov:2p19P17cr6XavfMJ8htYSS\",\n            \"signatureValue\": \"A011D11A2D91A9CB03ECFFB7D9AFC1001DB56B3DABF42BDD0F4D00352A9B8E0E73E85F0B4586DA2934696C0A78602EEB047EA6B3D9096C1A0C3FB144E6A51C09\"\n        }\n    }\n}",
            "title": "Structure of params object"
        },
        {
            "location": "/api/#create-project_1",
            "text": "Creates a new project.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createProject\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <create project data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Example:  {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"createProject\",\n    \"id\": 123,\n    \"params\": {\n        \"payload\": {\n            \"template\": {\n                \"name\": \"create_project\"\n            },\n            \"data\": {\n                \"title\": \"Test Water project\",\n                \"ownerName\": \"Don\",\n                \"ownerEmail\": \"don@gmail.com\",\n                \"shortDescription\": \"Project for water\",\n                \"longDescription\": \"project to save water for areas with drought\",\n                \"impactAction\": \"litres of water saved\",\n                \"projectLocation\": \"ZA\",\n                \"sdgs\": [\n                  \"12.2\",\n                  \"3\",\n                  \"2.4\"\n                ],\n                \"requiredClaims\": 30,\n                \"templates\": {\n                  \"claim\": {\n                    \"schema\": \"af175axcn6ejiuds0sh\",\n                    \"form\": \"1v6v8a6woabjiuds3i9\"\n                  }\n                },\n                \"evaluatorPayPerClaim\": \"0\",\n                \"socialMedia\": {\n                  \"facebookLink\": \"https://www.facebook.com/ixofoundation/\",\n                  \"instagramLink\": \"\",\n                  \"twitterLink\": \"\",\n                  \"webLink\": \"https://ixo.foundation\"\n                },\n                \"serviceEndpoint\": \"http://35.192.187.110:5000/\",\n                \"imageLink\": \"pc16l7yk62ejiudrox5\",\n                \"founder\": {\n                  \"name\": \"Nic\",\n                  \"email\": \"nic@test.co.za\",\n                  \"countryOfOrigin\": \"ZA\",\n                  \"shortDescription\": \"primary description for founder\",\n                  \"websiteURL\": \"www.water.com\",\n                  \"logoLink\": \"\"\n                }\n            }\n        },\n         \"signature\": {\n            \"type\": \"ed25519-sha-256\",\n            \"created\": \"2018-06-05T12:35:02Z\", \n            \"creator\": \"did:sov:2p19P17cr6XavfMJ8htYSS\",\n            \"signatureValue\": \"23EED2462B11B94C9F63A509B39F15CB9C0B2DB8C16A52A22115B755BF3F6BDF7ABB8881697AA7DB6F4AFBD7C5DE4618B403AB43B738841BB89E72C8792AC401\"\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <project data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n    }\n}  Example:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 123,\n    \"result\": {\n        \"_id\": \"5b32094f05aa3f0011405957\",\n        \"title\": \"Test Water project\",\n        \"ownerName\": \"Don\",\n        \"ownerEmail\": \"don@gmail.com\",\n        \"shortDescription\": \"Project for water\",\n        \"longDescription\": \"project to save water for areas with drought\",\n        \"impactAction\": \"litres of water saved\",\n        \"projectLocation\": \"ZA\",\n        \"sdgs\": [\n            \"12.2\",\n            \"3\",\n            \"2.4\"\n        ],\n        \"requiredClaims\": 30,\n        \"templates\": {\n            \"claim\": {\n                \"schema\": \"af175axcn6ejiuds0sh\",\n                \"form\": \"1v6v8a6woabjiuds3i9\"\n            }\n        },\n        \"evaluatorPayPerClaim\": \"0\",\n        \"socialMedia\": {\n            \"facebookLink\": \"https://www.facebook.com/ixofoundation/\",\n            \"instagramLink\": \"\",\n            \"twitterLink\": \"\",\n            \"webLink\": \"https://ixo.foundation\"\n        },\n        \"serviceEndpoint\": \"http://35.192.187.110:5000/\",\n        \"imageLink\": \"pc16l7yk62ejiudrox5\",\n        \"founder\": {\n            \"name\": \"Nic\",\n            \"email\": \"nic@test.co.za\",\n            \"countryOfOrigin\": \"ZA\",\n            \"shortDescription\": \"primary description for founder\",\n            \"websiteURL\": \"www.water.com\",\n            \"logoLink\": \"\"\n        },\n        \"txHash\": \"a09c8bc12a3e7cc1f859f0fc98cd37880d8c894826e0f1fa7a3f824db37941f5\",\n        \"__v\": 0\n    }\n}",
            "title": "Create Project"
        },
        {
            "location": "/api/#create-agent",
            "text": "Creates a new agent.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"createAgent\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <create agent data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <agent data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}",
            "title": "Create Agent"
        },
        {
            "location": "/api/#update-agent-status_1",
            "text": "Update Agent Status  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"updateAgentStatus\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <update agent data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <agent data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"did\": <creator's did>\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}",
            "title": "Update Agent Status"
        },
        {
            "location": "/api/#list-agents",
            "text": "List claims and latest status.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"listAgents\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <data to filter>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": [\n        {\n            <agent data>,\n            \"currentStatus\": {\n                <agent status data>\n            }\n        }\n    ]\n}",
            "title": "List Agents"
        },
        {
            "location": "/api/#submit-claim",
            "text": "Creates a new claim.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"submitClaim\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <submit claim data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <claim data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\"\n    }\n}",
            "title": "Submit Claim"
        },
        {
            "location": "/api/#evaluate-claim",
            "text": "Evaluate a new claim.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"evaluateClaim\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <evaluate claim data>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": {\n        \"__v\": 0,\n        <claim data>\n        \"tx\": \"b51cd2665d146d0a0240fd2756beb4c9e9c1948275ac5d37a7ae405ab2d71a7a\",\n        \"_id\": \"5a66e09b38f45f01d90d122a\",\n        \"version\": 1\n    }\n}",
            "title": "Evaluate Claim"
        },
        {
            "location": "/api/#list-claim",
            "text": "List claims and latest status.  Request:  {\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"listClaims\", \n    \"id\": 3, \n    \"params\": {\n        \"payload\": {        \n            \"template\": {\n                \"name\": \"<template to validate>\"\n            },\n            \"data\": {\n                <data to filter>\n            }\n        },\n        \"signature\": {\n            \"type\": <signature type ECDSA or E25519>,\n            \"created\": <date of signature>, \n            \"creator\": <user did>,\n            \"signatureValue\":  <signature in hex>\n        }\n    }\n}  Response:  {\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"result\": [\n        {\n            <claim data>,\n            \"evaluations\": {\n                <claim status data>\n            }\n        }\n    ]\n}",
            "title": "List Claim"
        },
        {
            "location": "/api/#heath-check-functions",
            "text": "",
            "title": "Heath Check Functions"
        },
        {
            "location": "/api/#health-check",
            "text": "URI:  <pds server>/  Request type:  GET  Response:  API is running  The ixo project data store (pds) uses JSON-RPC to receive client requests.  The structure of all calls follow the same structure:",
            "title": "Health Check"
        },
        {
            "location": "/api/#ixo-blockchain-api",
            "text": "",
            "title": "ixo Blockchain API"
        },
        {
            "location": "/api/#did-functions",
            "text": "",
            "title": "DID Functions"
        },
        {
            "location": "/api/#register-did-doc",
            "text": "Registers the DID Doc for the specified DID.  The DID Doc must contain the DID and the public key which can be used to verify signatures sign by this DID.  Request:           Server:  Blockchain TX Server    Method:  GET    URI:  /broadcast_tx_sync?tx=    Parameters:  <uppercase hex of the DID Doc with its signature preceded with Ox>     Example Request: http://localhost:46657/broadcast_tx_sync?tx=0x7B227...355430383A34363A31372B30323030227D7D  Example Parameter (pre hex encoding):  {\"payload\":[10,{\"didDoc\":{\"did\":\"did:sov:398fM9kMgHuNbCtRncYrwh\",\"pubKey\":\"2Af4UzgUAgQk8Wt5xEkfJrjQSxWgxsuD8bzDQJSNfMSw\",\"credentials\":[]}}],\"signature\":{\"signatureValue\":[1,\"211678D20C70292668C47D6220ED648F868DFE0CBB848EDB0E163F7EE35467F938CFB000FCCF1AD00A0AB67F6EEB6C02E4FE48D793247A7092D5B5613C87C405\"],\"created\":\"2018-06-05T08:46:17Z\"}}  Response:  {\n  \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n  \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\",\n  \"credentials\": [\n    {   \n        \"credential\":{\n            \"type\": [\"Credential\",\"ProofOfKYC\"],\n            \"issuer\": \"DHHeFW9G17McBUk45ty7Jn\",\n            \"issued\": \"2018-07-16T15:51:44Z\",\n            \"claim\": {\n                \"id\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n                \"KYCValidated\": true\n            }\n        }\n    }\n  ]\n}",
            "title": "Register DID Doc"
        },
        {
            "location": "/api/#add-a-credential-to-a-did-doc",
            "text": "Adds a signed credential to the DID Doc for the specified DID.  The Credential must be signed by the DID of the credential issuer and the credential issuer's DID must already be registered.  Request:           Server:  Blockchain TX Server    Method:  GET    URI:  /broadcast_tx_sync?tx=    Parameters:  <uppercase hex of the Add Credential Message with its signature preceded with Ox>     Example Request: http://localhost:46657/broadcast_tx_sync?tx=0x7B227...355430383A34363A31372B30323030227D7D  Example Parameter (pre hex encoding):  {\"payload\":[24,{\"credential\":{\"type\":[\"Credential\",\"ProofOfKYC\"],\"issuer\":\"DHHeFW9G17McBUk45ty7Jn\",\"issued\": \"2018-07-16T15:51:44+02:00\",\"claim\":{\"id\":\"DHHeFW9G17McBUk45ty7Jn\",\"KYCValidated\":true}}}],\"signature\":{\"signatureValue\":[1,\"8EA7D3D45C95863E5C7CD1A4043D5F618E32F41CA72FAE75B7C09377D2B6AFC9AE8844AF0B621216339F025C67428B1838C8A1BBCD48E761655EBA9CCF114502\"],\"created\":\"2018-07-16T14:39:31Z\"}}  Response:  {\n    jsonrpc: \"2.0\",\n    id: \"\",\n    result: {\n        code: 0,\n        datan        log: \"\",\n        hash: \"91C033E74E27E7778BD0FE3481F82F839C92C5BC\"\n    }\n}",
            "title": "Add a Credential to a DID Doc"
        },
        {
            "location": "/api/#get-did-doc",
            "text": "Returns the Did Doc for the specified DID.  This contains the public key which can be used to verify signatures sign by this DID.  Request:           Server:  Blockchain REST Server    Method:  GET    URI:  /did    Parameters:  <did>     Example: http://localhost:1317/did/did.sov.EvBFmtyRaBuMNMnwjHNVgn  Response:  {\n  \"did\": \"did.sov.EvBFmtyRaBuMNMnwjHNVgn\",\n  \"pubKey\": \"8awT75ZgZttei45J52bcXC2q8isMRATLcdgbmx4FHyFf\"\n  \"credentials\": [\n    {\n      \"type\": \"KYC\",\n      \"data\": \"KYC Authentication Service\",\n      \"signer\": \"DHHeFW9G17McBUk45ty7Jn\"\n    }\n  ]\n}",
            "title": "Get Did Doc"
        },
        {
            "location": "/api/#health-check-functions_1",
            "text": "",
            "title": "Health Check Functions"
        },
        {
            "location": "/api/#heath-check",
            "text": "Check whether the blockchain node is available  Request:           Server:  Blockchain TX Server    Method:  GET    URI:  /heath     Example: http://localhost:46657/health  Response:  {\njsonrpc: \"2.0\",\nid: \"\",\nresult: { }\n}",
            "title": "Heath Check"
        },
        {
            "location": "/api/#ixo-explorer-api",
            "text": "Returns a the publicly available data pertaining to projects",
            "title": "ixo Explorer API"
        },
        {
            "location": "/api/#project-functions_1",
            "text": "",
            "title": "Project Functions"
        },
        {
            "location": "/api/#list-projects_1",
            "text": "Lists all the projects",
            "title": "List Projects"
        },
        {
            "location": "/api/#get-project_1",
            "text": "Retrieves a project by project DID",
            "title": "Get Project"
        },
        {
            "location": "/api/#get-global-stats",
            "text": "Retrieves the global statistics and metrics for all projects",
            "title": "Get Global Stats"
        },
        {
            "location": "/api/#health-check-functions_2",
            "text": "",
            "title": "Health Check Functions"
        },
        {
            "location": "/api/#heath-check_1",
            "text": "Check that the explorer node is available",
            "title": "Heath Check"
        }
    ]
}